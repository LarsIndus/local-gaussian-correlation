x <- rnorm(n, mean = mean_x, sd = sd_x)
epsilon <- rnorm(n, mean = mean_epsilon, sd = sd_epsilon)
y <- x^2 + epsilon
cor(x, y)
lg_parabola <- localgauss(x = x, y = y, b1 = b, b2 = b, gsize = 25, hthresh = 0.005)
plot_localgauss(lg_parabola, plot_text = TRUE, plot_points = FALSE)
library(localgauss)
library(mvtnorm)
library(TSA)
library(copula)
source("plot_localgauss.R")
my_seed <- 42
# LGC for Double Parabola (Figure 5) ----------------------------------------
set.seed(my_seed)
n <- 500
x <- runif(n, -3, 3)
noise <- rnorm(n, sd = sqrt(1))
u <- sample(c(-1, 1), n, replace = TRUE)
y <- u * (x^2 + noise)
b <- 2
# Pearson correlation is close to 0:
cor(x, y, method = "pearson")
lg_double <- localgauss(x = x, y = y, b1 = b, b2 = b, gsize = 15)
plot_localgauss(lg_double, plot_points = TRUE, points_size = 0.5)
set.seed(my_seed)
n <- 2000
df <- 5
b <- 0.7
rho <- 0
sigma <- matrix(c(1, rho, rho, 1), nrow = 2)
x <- rmvt(n, sigma = sigma, df = df)
lg_t <- localgauss(x = x[, 1], y = x[, 2], gsize = 60, b1 = b, b2 = b, hthresh = 0.008)
plot_localgauss(lg_t, plot_text = TRUE, plot_points = FALSE)
set.seed(my_seed)
n <- 2000
alpha <- c(0.2, 0.6)
beta <- 0.2
garch <- garch.sim(alpha = alpha, beta = beta, n = n)
b <- 0.7
x_lag1 <- garch
y_lag1 <- x_lag1[-1]
x_lag1 <- x_lag1[1 : (n - 1)]
set.seed(my_seed)
n <- 2000
alpha <- c(0.2, 0.6)
beta <- 0.2
garch <- garch.sim(alpha = alpha, beta = beta, n = n)
b <- 0.7
y_lag1 <- garch[-1]
x_lag1 <- garch[1 : (n - 1)]
head(data.frame(x = x_lag1, y = y_lag1))
lg_GARCH <- localgauss(x = x_lag1, y = y_lag1, b1 = b, b2 = b, gsize = 50, hthresh = 0.015)
plot_localgauss(lg_GARCH, plot_text = TRUE, plot_points = FALSE)
set.seed(my_seed)
n <- 500
b <- 1
# Clayton copula with standard normal marginals and parameter theta = 2
my_mvd <- mvdc(copula = archmCopula(family = "Clayton", dim = 2, param = 2),
margins = c("norm", "norm"),
paramMargins = list(list(mean = 0, sd = 1), list(mean = 0, sd = 1)))
x <- rMvdc(mvdc = my_mvd, n)
lg_clayton <- localgauss(x = x[, 1], y = x[, 2], b1 = b, b2 = b, gsize = 15)
plot_localgauss(lg_clayton, plot_points = TRUE, plot_text = FALSE,points_size = 0.5)
# Setup ----------------------------------------------------------------
library(localgauss)
library(copula)
library(VineCopula)
source("plot_localgauss.R")
source("plot_localgauss_diagonal.R")
my_seed <- 42
n <- 500   # sample size for scatter plots
m <- 1000  # sample size for heat maps
# 1. Gaussian Copula (Figures 9 and 10)
set.seed(my_seed)
rho <- 0.7
b <- 1
# Gaussian copula with uniform marginals and correlation 0.7
gauss_mvd_uniform_marginals <- mvdc(
copula = ellipCopula(family = "normal", dim = 2, dispstr = "ex", param = rho),
margins = c("unif", "unif"),
paramMargins = list(list(min = 0, max = 1), list(min = 0, max = 1))
)
y <- rMvdc(mvdc = gauss_mvd_uniform_marginals, n)
# scatter plot
data.frame(x = y[, 1], y = y[, 2]) %>%
ggplot(aes(x = x, y = y)) +
geom_point(size = 0.5) +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# Gaussian copula with Gaussian marginals and correlation 0.7
gauss_mvd_gaussian_marginals <- mvdc(
copula = ellipCopula(family = "normal", dim = 2, dispstr = "ex", param = rho),
margins = c("norm", "norm"),
paramMargins = list(list(mean = 0, sd = 1), list(mean = 0, sd = 1))
)
set.seed(my_seed)
x <- rMvdc(mvdc = gauss_mvd_gaussian_marginals, m)
lg_gauss_gaussian_marginals <- localgauss(x = x[, 1], y = x[, 2], b1 = b, b2 = b, gsize = 15)
# LGC plot:
plot_localgauss(lg_gauss_gaussian_marginals, plot_text = TRUE)
# 2. t Copula (Figures 9 and 11)
set.seed(my_seed)
rho <- 0.7
df <- 2
b <- 1
# t copula with uniform marginals, correlation 0.7 and degrees of freedom 2
t_mvd_uniform_marginals <- mvdc(
copula = ellipCopula(family = "t", dim = 2, dispstr = "ex", param = rho, df = df),
margins = c("unif", "unif"),
paramMargins = list(list(min = 0, max = 1), list(min = 0, max = 1))
)
y <- rMvdc(mvdc = t_mvd_uniform_marginals, n)
# scatter plot
data.frame(x = y[, 1], y = y[, 2]) %>%
ggplot(aes(x = x, y = y)) +
geom_point(size = 0.5) +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# t copula with Gaussian marginals, correlation 0.7 and degrees of freedom 2
t_mvd_gaussian_marginals <- mvdc(
copula = ellipCopula(family = "t", dim = 2, dispstr = "ex", param = rho, df = df),
margins = c("norm", "norm"),
paramMargins = list(list(mean = 0, sd = 1), list(mean = 0, sd = 1))
)
set.seed(my_seed)
x <- rMvdc(mvdc = t_mvd_gaussian_marginals, m)
lg_t_gaussian_marginals <- localgauss(x = x[, 1], y = x[, 2], b1 = b, b2 = b,
gsize = 15, hthresh = 0.005)
# LGC plot:
plot_localgauss(lg_t_gaussian_marginals, plot_text = TRUE)
# 3. Clayton Copula (Figures 9 and 12)
set.seed(my_seed)
theta <- 3
b <- 1
# corresponding value of Kendall's tau:
BiCopPar2Tau(3, par = theta)
# Clayton copula with uniform marginals and parameter theta = 3
clayton_mvd_uniform_marginals <- mvdc(
copula = archmCopula(family = "Clayton", dim = 2, param = theta),
margins = c("unif", "unif"),
paramMargins = list(list(min = 0, max = 1), list(min = 0, max = 1))
)
y <- rMvdc(mvdc = clayton_mvd_uniform_marginals, n)
data.frame(x = y[, 1], y = y[, 2]) %>%
ggplot(aes(x = x, y = y)) +
geom_point(size = 0.5) +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# Clayton copula with Gaussian marginals and parameter theta = 3
clayton_mvd_gaussian_marginals <- mvdc(
copula = archmCopula(family = "Clayton", dim = 2, param = theta),
margins = c("norm", "norm"),
paramMargins = list(list(mean = 0, sd = 1), list(mean = 0, sd = 1))
)
set.seed(my_seed)
x <- rMvdc(mvdc = clayton_mvd_gaussian_marginals, m)
lg_clayton_gaussian_marginals <- localgauss(x = x[, 1], y = x[, 2], b1 = b, b2 = b,
gsize = 15, hthresh = 0.001)
# LGC plot:
plot_localgauss(lg_clayton_gaussian_marginals, plot_text = TRUE)
# 4. Gumbel Copula (Figures 9 and 13)
set.seed(my_seed)
theta <- 2.5
b <- 1
# corresponding value of Kendall's tau:
BiCopPar2Tau(4, par = theta)
# Gumbel copula with uniform marginals and parameter theta = 2.5
gumbel_mvd_uniform_marginals <- mvdc(
copula = archmCopula(family = "Gumbel", dim = 2, param = theta),
margins = c("unif", "unif"),
paramMargins = list(list(min = 0, max = 1), list(min = 0, max = 1))
)
y <- rMvdc(mvdc = gumbel_mvd_uniform_marginals, n)
# scatter plot
data.frame(x = y[, 1], y = y[, 2]) %>%
ggplot(aes(x = x, y = y)) +
geom_point(size = 0.5) +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# Gumbel copula with Gaussian marginals and parameter theta = 2.5
gumbel_mvd_gaussian_marginals <- mvdc(
copula = archmCopula(family = "Gumbel", dim = 2, param = theta),
margins = c("norm", "norm"),
paramMargins = list(list(mean = 0, sd = 1), list(mean = 0, sd = 1))
)
set.seed(my_seed)
x <- rMvdc(mvdc = gumbel_mvd_gaussian_marginals, m)
lg_gumbel_gaussian_marginals <- localgauss(x = x[, 1], y = x[, 2], b1 = b, b2 = b,
gsize = 15, hthresh = 0.005)
# LGC plot:
plot_localgauss(lg_gumbel_gaussian_marginals, plot_text = TRUE)
# 5. Frank Copula (Figures 9 and 14)
set.seed(my_seed)
theta <- 8
b <- 1
# corresponding value of Kendall's tau:
BiCopPar2Tau(5, par = theta)
# Frank copula with uniform marginals and parameter theta = 8
frank_mvd_uniform_marginals <- mvdc(
copula = archmCopula(family = "Frank", dim = 2, param = theta),
margins = c("unif", "unif"),
paramMargins = list(list(min = 0, max = 1), list(min = 0, max = 1))
)
y <- rMvdc(mvdc = frank_mvd_uniform_marginals, n)
# scatter plot
data.frame(x = y[, 1], y = y[, 2]) %>%
ggplot(aes(x = x, y = y)) +
geom_point(size = 0.5) +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# Frank copula with Gaussian marginals and parameter theta = 8
frank_mvd_gaussian_marginals <- mvdc(
copula = archmCopula(family = "Frank", dim = 2, param = theta),
margins = c("norm", "norm"),
paramMargins = list(list(mean = 0, sd = 1), list(mean = 0, sd = 1))
)
set.seed(my_seed)
x <- rMvdc(mvdc = frank_mvd_gaussian_marginals, m)
lg_frank_gaussian_marginals <- localgauss(x = x[, 1], y = x[, 2], b1 = b, b2 = b,
gsize = 15, hthresh = 0.0005)
# LGC plot:
plot_localgauss(lg_frank_gaussian_marginals, plot_text = TRUE)
# 6. Joe Copula (Figures 9 and 15)
set.seed(my_seed)
theta <- 4
b <- 1
# corresponding value of Kendall's tau:
BiCopPar2Tau(6, par = theta)
# Joe copula with uniform marginals and parameter theta = 4
joe_mvd_uniform_marginals <- mvdc(
copula = archmCopula(family = "Joe", dim = 2, param = theta),
margins = c("unif", "unif"),
paramMargins = list(list(min = 0, max = 1), list(min = 0, max = 1))
)
y <- rMvdc(mvdc = joe_mvd_uniform_marginals, n)
# scatter plot
data.frame(x = y[, 1], y = y[, 2]) %>%
ggplot(aes(x = x, y = y)) +
geom_point(size = 0.5) +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# Joe copula with Gaussian marginals and parameter theta = 4
joe_mvd_gaussian_marginals <- mvdc(
copula = archmCopula(family = "Joe", dim = 2, param = theta),
margins = c("norm", "norm"),
paramMargins = list(list(mean = 0, sd = 1), list(mean = 0, sd = 1))
)
set.seed(my_seed)
x <- rMvdc(mvdc = joe_mvd_gaussian_marginals, m)
lg_joe_gaussian_marginals <- localgauss(x = x[, 1], y = x[, 2], b1 = b, b2 = b,
gsize = 15, hthresh = 0.005)
# LGC plot:
plot_localgauss(lg_joe_gaussian_marginals, plot_text = TRUE)
n <- 1000 # large sample size for smooth curves - long runtime!
b <- 1
# 1. Gaussian copula
set.seed(my_seed)
rho <- 0.7
# Gaussian copula with Gaussian marginals and correlation 0.7
gauss_mvd <- mvdc(
copula = ellipCopula(family = "normal", dim = 2, dispstr = "ex", param = rho),
margins = c("norm", "norm"),
paramMargins = list(list(mean = 0, sd = 1), list(mean = 0, sd = 1))
)
x <- rMvdc(mvdc = gauss_mvd, n)
# LGC along diagonal:
plot_localgauss_diagonal(x, b1 = b, b2 = b) +
ylim(0, 1) +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# 2. t Copula
set.seed(my_seed)
rho <- 0.7
nu <- 2
# t copula with Gaussian marginals, correlation 0.7 and degrees of freedom 2
t_mvd <- mvdc(
copula = ellipCopula(family = "t", dim = 2, dispstr = "ex", param = rho, df = nu),
margins = c("norm", "norm"),
paramMargins = list(list(mean = 0, sd = 1), list(mean = 0, sd = 1))
)
x <- rMvdc(mvdc = t_mvd, n)
# LGC along diagonal:
plot_localgauss_diagonal(x, b1 = b, b2 = b) +
ylim(0, 1) +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# 3. Clayton copula
set.seed(my_seed)
theta <- 3
# Clayton copula with Gaussian marginals and parameter theta = 3
clayton_mvd <- mvdc(
copula = archmCopula(family = "Clayton", dim = 2, param = theta),
margins = c("norm", "norm"),
paramMargins = list(list(mean = 0, sd = 1), list(mean = 0, sd = 1))
)
x <- rMvdc(mvdc = clayton_mvd, n)
# LGC along diagonal:
plot_localgauss_diagonal(x, b1 = b, b2 = b) +
ylim(0, 1) +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# 4 Gumbel Copula
set.seed(my_seed)
theta <- 2.5
# Gumbel copula with Gaussian marginals and parameter theta = 2.5
gumbel_mvd <- mvdc(
copula = archmCopula(family = "Gumbel", dim = 2, param = theta),
margins = c("norm", "norm"),
paramMargins = list(list(mean = 0, sd = 1), list(mean = 0, sd = 1))
)
x <- rMvdc(mvdc = gumbel_mvd, n)
# LGC along diagonal:
plot_localgauss_diagonal(x, b1 = b, b2 = b) +
ylim(0, 1) +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# 5. Frank Copula
set.seed(my_seed)
theta <- 8
# Frank copula with Gaussian marginals and parameter theta = 8
frank_mvd <- mvdc(
copula = archmCopula(family = "Frank", dim = 2, param = theta),
margins = c("norm", "norm"),
paramMargins = list(list(mean = 0, sd = 1), list(mean = 0, sd = 1))
)
x <- rMvdc(mvdc = frank_mvd, n)
# LGC along diagonal:
plot_localgauss_diagonal(x, b1 = b, b2 = b) +
ylim(0, 1) +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# 6. Joe Copula
set.seed(my_seed)
theta <- 4
# Joe copula with Gaussian marginals and parameter theta = 4
joe_mvd <- mvdc(
copula = archmCopula(family = "Joe", dim = 2, param = theta),
margins = c("norm", "norm"),
paramMargins = list(list(mean = 0, sd = 1), list(mean = 0, sd = 1))
)
x <- rMvdc(mvdc = joe_mvd, n)
# LGC along diagonal:
plot_localgauss_diagonal(x, b1 = b, b2 = b) +
ylim(0, 1) +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
library(BatchGetSymbols)
library(data.table)
library(localgauss)
library(fGarch)
library(copula)
library(VineCopula)
source("plot_localgauss.R")
source("plot_localgauss_diagonal.R")
my_seed <- 42
# Fetch data and preprocess ------------------------------------------------
# Get daily log returns for Apple and Google from 01/01/2005 to 12/31/2018:
tickers <- c("AAPL", "GOOG")
first.date <- "2005-01-01"
last.date <- "2018-12-31"
l.out <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date,
type.return = "log",
freq.data = "daily",
bench.ticker = "^GSPC",
do.cache = FALSE)
raw_data <- data.table(l.out$df.tickers)
# Transform into wide format and extract log returns; omit NAs:
mydata <- reshape.wide(raw_data)
mydata <- mydata$ret.adjusted.prices
mydata <- na.omit(mydata, cols = tickers)
# remove zero return rows:
mydata <- mydata[AAPL != 0 & GOOG != 0]
# calculate 100 x log returns:
mydata[, apple_100 := 100 * AAPL]
mydata[, google_100 := 100 * GOOG]
# Perform a GARCH(1,1) filtering with t-distributed innovations:
apple_garch <- garchFit(~ garch(1, 1), data = mydata$AAPL, cond.dist = "std", trace = FALSE)
google_garch <- garchFit(~ garch(1, 1), data = mydata$GOOG, cond.dist = "std", trace = FALSE)
mydata[, apple_garch := residuals(apple_garch, standardize = TRUE)]
mydata[, google_garch := residuals(google_garch, standardize = TRUE)]
# Summaries of the GARCH fitting. Note that all coefficients are significant:
summary(apple_garch)
summary(google_garch)
# Prices (Figure 17):
ggplot(data = raw_data, aes(x = ref.date, y = price.close)) +
geom_line() +
facet_grid(ticker ~ ., scales = "free_y",
labeller = labeller(ticker = c(AAPL = "Apple", GOOG = "Google"))) +
labs(x = "Date", y = "Price [USD]") +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# Log returns (Figure 17):
ggplot(data = na.omit(raw_data), aes(x = ref.date, y = 100 * ret.adjusted.prices)) +
geom_line() +
facet_grid(ticker ~ .,
labeller = labeller(ticker = c(AAPL = "Apple", GOOG = "Google"))) +
labs(x = "Date", y = "100 x Log Returns") +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# Histograms (Figure 18):
ggplot(data = na.omit(raw_data), aes(x = 100 * ret.adjusted.prices)) +
geom_histogram(binwidth = 0.5, color = "black", fill = "grey") +
facet_grid(ticker ~ ., scales = "free_y",
labeller = labeller(ticker = c(AAPL = "Apple", GOOG = "Google"))) +
labs(x = "100 x Log Returns", y = "Frequency") +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
ggplot(raw_data, aes(sample = 100 * ret.adjusted.prices)) +
stat_qq(distribution = qnorm) +
stat_qq_line(distribution = qnorm) +
facet_grid(ticker ~ .,
labeller = labeller(ticker = c(AAPL = "Apple", GOOG = "Google"))) +
labs(x = "", y = "") +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
ggplot(raw_data, aes(sample = 100 * ret.adjusted.prices)) +
stat_qq(distribution = qstd) +
stat_qq_line(distribution = qstd) +
facet_grid(ticker ~ .,
labeller = labeller(ticker = c(AAPL = "Apple", GOOG = "Google"))) +
labs(x = "", y = "") +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# bandwidth used for local likelihood:
b <- 1.5
# Scatter plot (Figure 19):
ggplot(data = mydata, aes(x = apple_100, y = google_100)) +
geom_point(size = 0.5) +
labs(x = "Apple", y = "Google") +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# Correlation is about 0.5:
cor(mydata$apple_100, mydata$google_100, method = "pearson")
lg <- localgauss(x = mydata$apple_100, y = mydata$google_100,
b1 = b, b2 = b, gsize = 50, hthresh = 0.0025)
# LGC heat map (Figure 20):
plot_localgauss(lg, plot_text = TRUE) +
labs(x = "Apple", y = "Google")
# LGC along diagonal (Figure 21):
plot_localgauss_diagonal(mydata[, c("apple_100", "google_100")], b1 = b, b2 = b) +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# Copula Fitting by Maximum Likelihood:
pseudo_observations <- pobs(as.matrix(mydata[, c("apple_100", "google_100")]))
copula <- BiCopSelect(pseudo_observations[, 1], pseudo_observations[, 2],
familyset = NA, selectioncrit = "AIC")
copula
# Best fit: t copula with rho = 0.51, df = 3.26
rho <- copula$par
df <- copula$par2
rho
df
# Convert into Gaussian pseudo-observations:
apple_gaussian_pseudo <- qnorm(pseudo_observations[, 1])
google_gaussian_pseudo <- qnorm(pseudo_observations[, 2])
# Compare to simulated t copula along the diagonal:
set.seed(my_seed)
n <- 10000 # large sample size - long runtime!
diag_low <- -4
diag_high <- 4
step_size <- 0.1
# t copula with fitted parameters:
t_mvd <- mvdc(
copula = ellipCopula(family = "t", dim = 2, dispstr = "ex", param = rho, df = df),
margins = c("norm", "norm"),
paramMargins = list(list(mean = 0, sd = 1), list(mean = 0, sd = 1))
)
copula_sim <- rMvdc(mvdc = t_mvd, n)
diag_matrix <- matrix(c(seq(diag_low, diag_high, step_size), seq(diag_low, diag_high, step_size)),
ncol = 2)
# LGC for Gaussian pseudo-observations:
lg_diag_pseudo <- localgauss(x = apple_gaussian_pseudo, y = google_gaussian_pseudo,
xy.mat = diag_matrix, b1 = b, b2 = b)
# LGC for simulated t copula:
lg_diag_t_copula <- localgauss(x = copula_sim[, 1], y = copula_sim[, 2],
xy.mat = diag_matrix, b1 = b, b2 = b)
plot_df <- data.frame(diag = seq(diag_low, diag_high, step_size),
lgc_pseudo = lg_diag_pseudo$par.est[, "rho"],
lgc_t_copula = lg_diag_t_copula$par.est[, "rho"])
# LGC comparison along the diagonal between real data and simulated copula (Figure 22):
plot_df %>% melt(id.vars = "diag", measure.vars = c("lgc_pseudo", "lgc_t_copula")) %>%
ggplot(aes(x = diag, y = value, linetype = variable)) +
geom_line(aes(linetype = variable)) +
scale_linetype_manual(values = c("solid", "dashed"),
labels = c("data", "t copula"), name = "") +
theme_classic() +
theme(
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
legend.position = c(0.125, 0.16)
) +
labs(x = "Diagonal", y = "LGC")
lg_filtered <- localgauss(x = mydata$apple_garch, y = mydata$google_garch,
b1 = b, b2 = b, gsize = 40, hthresh = 0.004)
# LGC heat map (Figure 23):
plot_localgauss(lg_filtered, plot_text = TRUE) +
labs(x = "Apple (filtered)", y = "Google (filtered)")
# LGC along diagonal (Figure 24):
plot_localgauss_diagonal(mydata[, c("apple_garch", "google_garch")], b1 = b, b2 = b) +
theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# Copula Fitting by Maximum Likelihood:
pseudo_observations_filtered <- pobs(as.matrix(mydata[, c("apple_garch", "google_garch")]))
copula_filtered <- BiCopSelect(pseudo_observations_filtered[, 1], pseudo_observations_filtered[, 2],
familyset = NA, selectioncrit = "AIC")
copula_filtered
# Best fit: t copula with rho = 0.5, df = 5.25
rho_filtered <- copula_filtered$par
df_filtered <- copula_filtered$par2
rho_filtered
df_filtered
